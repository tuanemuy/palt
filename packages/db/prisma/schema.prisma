// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  customId      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  accounts        Account[]
  profile         Profile?
  tags            Tag[]
  posts           Post[]
  accessiblePosts AccessibleUserOnPost[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  thumbnailId  String?
  thumbnail    File?   @relation(fields: [thumbnailId], references: [id], onDelete: Restrict)
  displayName  String?
  introduction String?
  orderBy      String  @default("createdAt")
}

model Post {
  id              String                 @id @default(cuid())
  userId          String
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  body            String
  isPublic        Boolean                @default(false)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?
  tags            TagOnPost[]
  accessibleUsers AccessibleUserOnPost[]
  files           FileOnPost[]
  revisions       Revision[]
}

model Revision {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  body      String
  createdAt DateTime @default(now())
}

model Tag {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  isPublic    Boolean     @default(false)
  taggedPosts TagOnPost[]

  @@unique([userId, name])
}

model TagOnPost {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Restrict)

  @@id([postId, tagId])
}

model AccessibleUserOnPost {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  level  String @default("read")

  @@id([postId, userId])
}

model File {
  id           String       @id @default(cuid())
  key          String       @unique
  url          String
  mimeType     String
  assets       Asset[]
  profiles     Profile[]
  relatedPosts FileOnPost[]
}

model Asset {
  id       String @id @default(cuid())
  fileId   String
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  key      String @unique
  url      String
  mimeType String
  label    String

  @@unique([fileId, label])
}

model FileOnPost {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  fileId String
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([postId, fileId])
}
